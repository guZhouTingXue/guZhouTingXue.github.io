import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as a,o as n}from"./app-PlJrQRNa.js";const e={};function l(h,i){return n(),t("div",null,i[0]||(i[0]=[a(`<h1 id="_1-2-基于linux的文件操作" tabindex="-1"><a class="header-anchor" href="#_1-2-基于linux的文件操作"><span>1.2 基于linux的文件操作</span></a></h1><ul><li>linux 下一切皆文件，socket 也是文件的一种</li><li>通过socket 发送数据 《=》向socket 写 数据 《=》写文件</li><li>读取接收到的网络数据 《=》读文件</li><li>关闭网络连接 《=》关闭文件</li></ul><p>读写socket 文件的IO接口有多种：</p><table><thead><tr><th>IO类型</th><th>头文件</th><th>接口</th><th>特点</th></tr></thead><tbody><tr><td>标准</td><td>&lt;stdio.h&gt;</td><td>fread,fwrite</td><td>标准规定，平台统一。带有一个用户态的缓冲</td></tr><tr><td>socket io</td><td>&lt;sys/types.h&gt; &lt;sys/socket.h&gt;</td><td>recv,send</td><td>socekt 专用</td></tr><tr><td>系统io</td><td>&lt;sys/types.h&gt; &lt;sys/stat.h&gt; &lt;fcntl.h&gt; &lt;unistd.h&gt;</td><td>read,write</td><td></td></tr></tbody></table><h2 id="文件描述符-句柄" tabindex="-1"><a class="header-anchor" href="#文件描述符-句柄"><span>文件描述符（句柄）</span></a></h2><p>打开 或 创建文件时会返回一个文件描述符，该描述符就代表了文件，通过描述符操作文件。<br> 3个标准文件的文件描述符是固定分配的</p><table><thead><tr><th>file descriptor</th><th>object</th></tr></thead><tbody><tr><td>0</td><td>input</td></tr><tr><td>1</td><td>output</td></tr><tr><td>2</td><td>error</td></tr></tbody></table><h2 id="open" tabindex="-1"><a class="header-anchor" href="#open"><span>open</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;fcntl.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pathname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> flags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>brief： 按指定方式打开文件<br> param[in] pathname：文件名称<br> param[in] flags：打开方式<br> return -1： 出错，同时设置errno；&gt;=0 : new file descriptor，从最小的未使用的描述符开始分配</p><table><thead><tr><th>flag</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>O_RDWR</td><td>读写</td><td></td></tr><tr><td>O_RDONLY</td><td>只读</td><td></td></tr><tr><td>O_WRONLY</td><td>只写</td><td>以上flag 必须选择其中一种</td></tr><tr><td>O_CREAT</td><td>文件不存在则创建</td><td>以下为附加选项</td></tr><tr><td>O_TRUNC</td><td>删除所有数据</td><td></td></tr><tr><td>O_APPEND</td><td>在文件末尾添加数据</td><td></td></tr></tbody></table><h2 id="write" tabindex="-1"><a class="header-anchor" href="#write"><span>write</span></a></h2><blockquote><p>[!quote]<br> write() writes up to count bytes from the buffer pointed buf to the file referred to by the file descriptor fd.</p></blockquote><p>最多写入count 个字节，可能出现实际写入大小小于count的情况：</p><ul><li>空间不足</li><li>参数限制</li><li>信号中断</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ssize_t</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>return -1: 出错； &gt;= 0 实际写入的字节大小</p><h2 id="read" tabindex="-1"><a class="header-anchor" href="#read"><span>read</span></a></h2><blockquote><p>[!quote]<br> read() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.</p></blockquote><p>在当前位置的基础上从文件中读取最多指定长度字节的数据</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ssize_t</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>return -1：出错； &gt;=0 : 实际读取到的字节大小</p><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><p>unix 风格的函数通常在成功时返回非负值，失败时返回-1 或 null，并设置全局变量errno。通过strerror(errno) 获取错误信息</p><blockquote><p>[!quote]<br> The strerror() function returns a pointer to a string that describes the error code passed in the argument errnum, possibly using the LC_MESSAGES part of the current locale to select the appropriate language.</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;string.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strerror</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> errnum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用unix 风格函数时的错误处理：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;string.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unix_error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* Unix-style error */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(stderr, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, msg, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strerror</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(errno));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为使用全局变量来存储错误码，所以每次调用unix 风格函数后都应该检查是否出错。多线程中使用strerror_r() 保证线程安全。</p><h2 id="查看已打开的文件" tabindex="-1"><a class="header-anchor" href="#查看已打开的文件"><span>查看已打开的文件</span></a></h2><p>使用lsof - list open files命令</p><ol><li>创建一个进程并以只读的方式打开同路径下的1.txt文件</li></ol><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="cpp" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;fcntl.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fid;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	fid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./1.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, O_RDONLY);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fid:&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; pid:&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getpid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>其中1.txt 的内容为 1.txt<br> 2. 编译并运行程序<br> 输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>fid:3 pid:2836</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>打开另一终端，执行 lsof -p 2836, 部分结果如下</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</span></span>
<span class="line"><span>a.out   2836 ming    0u   CHR  136,8      0t0     11 /dev/pts/8</span></span>
<span class="line"><span>a.out   2836 ming    1u   CHR  136,8      0t0     11 /dev/pts/8</span></span>
<span class="line"><span>a.out   2836 ming    2u   CHR  136,8      0t0     11 /dev/pts/8</span></span>
<span class="line"><span>a.out   2836 ming    3r   REG   0,44        6     24 /media/sf_share/test/1.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>名称</th><th>值</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>COMMAND</td><td>a.out</td><td>进程名称</td><td></td></tr><tr><td>PID</td><td>2836</td><td>进程号(ID）</td><td></td></tr><tr><td>FD</td><td>0u、1u、2u、3r</td><td>file descriptor文件描述符</td><td>u：读写；r：只读</td></tr><tr><td>TYPE</td><td>CHR、REG</td><td>文件类型</td><td>CHR-字符设备，REG-常规文件</td></tr><tr><td>SIZE/OFF</td><td>0t0、6</td><td>文件大小（常规文件）/偏移量（其他文件）</td><td>1.txt 中字符串长度为6（5个字符+1结尾）；0t 表示十进制。</td></tr><tr><td>NODE</td><td>11、24</td><td>inode编号，文件在系统中的唯一标识</td><td></td></tr><tr><td>NAME</td><td>/dev/pts/8<br>/media/sf_share/test/1.txt</td><td>路径</td><td>pts：虚拟终端设备；8：终端号</td></tr></tbody></table><p>可以看到进程默认就会打开3个标准设备，它们的FD 分别是0，1，2<br> 文件类型列表：</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>REG</td><td>常规文件</td></tr><tr><td>DIR</td><td></td></tr><tr><td>CHR</td><td>字符设备</td></tr><tr><td>socket</td><td></td></tr></tbody></table>`,40)]))}const p=s(e,[["render",l]]),k=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1.2%20%E5%9F%BA%E4%BA%8Elinux%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html","title":"1.2 基于linux的文件操作","lang":"zh-CN","frontmatter":{"category":"网络编程","description":"1.2 基于linux的文件操作 linux 下一切皆文件，socket 也是文件的一种 通过socket 发送数据 《=》向socket 写 数据 《=》写文件 读取接收到的网络数据 《=》读文件 关闭网络连接 《=》关闭文件 读写socket 文件的IO接口有多种： 文件描述符（句柄） 打开 或 创建文件时会返回一个文件描述符，该描述符就代表了文件...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.2 基于linux的文件操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-17T13:44:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1.2%20%E5%9F%BA%E4%BA%8Elinux%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:title","content":"1.2 基于linux的文件操作"}],["meta",{"property":"og:description","content":"1.2 基于linux的文件操作 linux 下一切皆文件，socket 也是文件的一种 通过socket 发送数据 《=》向socket 写 数据 《=》写文件 读取接收到的网络数据 《=》读文件 关闭网络连接 《=》关闭文件 读写socket 文件的IO接口有多种： 文件描述符（句柄） 打开 或 创建文件时会返回一个文件描述符，该描述符就代表了文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-17T13:44:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-17T13:44:49.000Z"}]]},"git":{"createdTime":1758032987000,"updatedTime":1758116689000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":2,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":3.31,"words":994},"filePathRelative":"网络编程/1.2 基于linux的文件操作.md","excerpt":"","autoDesc":true}');export{p as comp,k as data};
