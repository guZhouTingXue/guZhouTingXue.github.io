import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as n,f as t,r as l,o as p}from"./app-eVAGb6M3.js";const d={};function r(c,s){const a=l("Mermaid");return p(),e("div",null,[s[0]||(s[0]=n(`<h1 id="报文接收处理" tabindex="-1"><a class="header-anchor" href="#报文接收处理"><span>报文接收处理</span></a></h1><h2 id="一次接收不同类型的多个包-tcp粘包" tabindex="-1"><a class="header-anchor" href="#一次接收不同类型的多个包-tcp粘包"><span>一次接收不同类型的多个包（TCP粘包）</span></a></h2><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>准备数据：<br> 模拟被控站：建立连接后将以下数据包一次性发送给控制站</p><ol><li>startdt con：启动数据传输确认</li><li>I（0，0）：包含两个M_ME_NB_1数据</li><li>I（1，0）：包含1个M_ME_NC_1 数据</li></ol><div class="language- line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>// startdt con</span></span>
<span class="line"><span>0000   68 04 0b 00 00 00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//I（0，0）</span></span>
<span class="line"><span>0000   68 16 00 00 00 00</span></span>
<span class="line"><span>//M_ME_NB_1</span></span>
<span class="line"><span>0000   0b 02 01 00 01 00 6e 00 00 00 00 00 6f 00 00 00</span></span>
<span class="line"><span>0010   00 00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//I（1，0）</span></span>
<span class="line"><span>0000   68 12 02 00 00 00</span></span>
<span class="line"><span>//M_ME_NC_1</span></span>
<span class="line"><span>0000   0d 01 01 00 01 00 78 00 00 25 06 49 40 00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>综合：</span></span>
<span class="line"><span>68 04 0b 00 00 00 68 16 00 00 00 00  0b 02 01 00 01 00 6e 00 00 00 00 00 6f 00 00 00 00 00 68 12 02 00 00 00 0d 01 01 00 01 00 78 00 00 25 06 49 40 00</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>使用网络调试助手：<br> 设置为TCP server，端口号设置为2404<br> 启动client，连接到server<br> 连接建立成功后回复数据包</p><p>结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>msgSize: 6</span></span>
<span class="line"><span>RCVD: </span></span>
<span class="line"><span>&quot; 68 4 b 0 0 0&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>msgSize: 24</span></span>
<span class="line"><span>RCVD: </span></span>
<span class="line"><span>&quot; 68 16 0 0 0 0 b 2 1 0 1 0 6e 0 0 0 0 0 6f 0 0 0 0 0&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>msgSize: 20</span></span>
<span class="line"><span>RCVD: </span></span>
<span class="line"><span>&quot; 68 12 2 0 0 0 d 1 1 0 1 0 78 0 0 25 6 49 40 0&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析时数据包被拆分为3包，长度分别为6，24，20. 和单个帧发送的数据对应。</p><h3 id="获取到一帧报文" tabindex="-1"><a class="header-anchor" href="#获取到一帧报文"><span>获取到一帧报文</span></a></h3><p>APCI中包含了报文起始标志（0x68）以及帧长度（不包含起始字节 以及 长度本身）。<br> 首先发送方保证没有发送额外的包含了0x68的非有效帧的内容，TCP 保证了数据不会出错。<br> 处理逻辑：</p><ol><li>找到起始字节；</li><li>获取长度</li><li>获取整帧数据</li></ol>`,13)),t(a,{code:"eJxdkc9OwkAQxu99ij3CgURfwINRTpoQ9EY4NLBZGrU1FL0AiVFEUPmTKILGgwcFNAEaE6WhqbxMZ1vewk13qZXbzsw3v5lvluTl4xza35KSOHO6q5MIbb7R+2+oGbRj0MY4iqS4omZxdhMTRS3S3gTafZh+ulaL1n+YzJlVHfMMzIH7VPG+pjC4QTHEBJwTlBYXQ6hVObPMhskcGD+UScSxmrqWOcAFxxx5EwtaD+sw6nrX5wGSvlzBvBv1+3awSgq51Kpw0ZnDrJ/2JUl8JCuqohKhgvq7Yz/y4WlpW9VOSK4oSjUDLodsO15FYSlHOuZsrSzt4UJC01Pe2AC7A/Yd1BvMpNecMsYSnMhrGazrKXituO0q852WlmdFsdgGCh3Sj0vslCX07xZ+/s9lEAaO/Ax34D+RGCpccS59/hDuxrclvrkg8WXCXyo6ehO+STBI+gXYoxFp"}),s[1]||(s[1]=n(`<p>实现：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="cs104_connetion.c/recviveMessage"><span>cs104_connetion.c/recviveMessage</span></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">receiveMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CS104_Connection self);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><table><thead><tr><th>返回值</th><th>含义</th></tr></thead><tbody><tr><td>-1</td><td>读取socket出错</td></tr><tr><td>0</td><td>socket 中没有数据</td></tr><tr><td>&gt;0</td><td>读取到完整的一帧，数据存储在了buffer</td></tr></tbody></table><table><thead><tr><th>bufPos的值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>没有找到帧起始字节</td></tr><tr><td>1</td><td>已找到帧头</td></tr><tr><td>&gt;1</td><td>已找到帧头 及 长度</td></tr><tr><td>bufPos 表示已读取数据的长度 (也是未读取数据填充buffer的起始位置)</td><td></td></tr></tbody></table><p>是否读取到完整一帧的判断：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> remainingLength </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> length </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bufPos </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6))])}const v=i(d,[["render",r]]),u=JSON.parse('{"path":"/IEC%2060870-5-104/%E6%8A%A5%E6%96%87%E6%8E%A5%E6%94%B6%E5%A4%84%E7%90%86.html","title":"报文接收处理","lang":"zh-CN","frontmatter":{"category":"IEC 60870-5-104","description":"报文接收处理 一次接收不同类型的多个包（TCP粘包） 测试 准备数据： 模拟被控站：建立连接后将以下数据包一次性发送给控制站 startdt con：启动数据传输确认 I（0，0）：包含两个M_ME_NB_1数据 I（1，0）：包含1个M_ME_NC_1 数据 使用网络调试助手： 设置为TCP server，端口号设置为2404 启动client，连接...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"报文接收处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-03T15:07:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/IEC%2060870-5-104/%E6%8A%A5%E6%96%87%E6%8E%A5%E6%94%B6%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:title","content":"报文接收处理"}],["meta",{"property":"og:description","content":"报文接收处理 一次接收不同类型的多个包（TCP粘包） 测试 准备数据： 模拟被控站：建立连接后将以下数据包一次性发送给控制站 startdt con：启动数据传输确认 I（0，0）：包含两个M_ME_NB_1数据 I（1，0）：包含1个M_ME_NC_1 数据 使用网络调试助手： 设置为TCP server，端口号设置为2404 启动client，连接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T15:07:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T15:07:39.000Z"}]]},"git":{"createdTime":1756648686000,"updatedTime":1756912059000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":2,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":2.21,"words":664},"filePathRelative":"IEC 60870-5-104/报文接收处理.md","excerpt":"","autoDesc":true}');export{v as comp,u as data};
