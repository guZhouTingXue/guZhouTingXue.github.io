import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as r,f as n,a as s,e as a,w as l,r as o,o as u}from"./app-D-r_7lG0.js";const g={};function b(k,i){const e=o("Mermaid"),p=o("Tabs");return u(),h("div",null,[i[16]||(i[16]=r('<h1 id="类图" tabindex="-1"><a class="header-anchor" href="#类图"><span>类图</span></a></h1><blockquote><p>Mermaid 中创建类图的语法</p></blockquote><p><a href="https://mermaid.js.org/intro/" target="_blank" rel="noopener noreferrer">https://mermaid.js.org/intro/</a></p><h2 id="define-a-class" tabindex="-1"><a class="header-anchor" href="#define-a-class"><span>Define a class</span></a></h2><p>定义类的方式：</p><ol><li>显式声明类：<br> 实现：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>class Animal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>效果：</p>',8)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gTzFBzzMnMTc7gAig0JcQ=="}),i[17]||(i[17]=r(`<ol start="2"><li>在关系中隐式声明一个类</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram</span></span>
<span class="line"><span>Vehicle &lt;|-- Car</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>定义两个类Vehicle、Car，且Car 继承于Vehicle 
</code></pre><p>效果：</p>`,4)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gxLzchMzklVsKnR1VVwTiziAgCvKQoR"}),i[18]||(i[18]=r(`<h3 id="class-labels" tabindex="-1"><a class="header-anchor" href="#class-labels"><span>Class labels</span></a></h3><p>在类名中添加标签-额外的说明<br> 语法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>class Name[&quot;label&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram</span></span>
<span class="line"><span>	class Class[&quot;This is a label&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>`,6)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gTzFJxBZLRSSEZmsQIQJSrkJCal5ijFcgEAb9APRg=="}),i[19]||(i[19]=s("h3",{id:"annotations-on-classes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#annotations-on-classes"},[s("span",null,"Annotations on classes")])],-1)),i[20]||(i[20]=s("blockquote",null,[s("p",null,"It is possible to annotate classes with markers to provide additional metadata about the class.")],-1)),i[21]||(i[21]=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"type（annotatiion）"),s("th",null,"description")])]),s("tbody",null,[s("tr",null,[s("td",null,"<<Interface>>"),s("td")]),s("tr",null,[s("td",null,"<<Abstract>>"),s("td")]),s("tr",null,[s("td",null,"<<Service>>"),s("td")]),s("tr",null,[s("td",null,"<<Enumeration>>"),s("td")]),s("tr",null,[s("td",{annotation:""},"声明的方式：class Name"),s("td")]),s("tr",null,[s("td",null,"效果："),s("td")])])],-1)),n(e,{code:"eJxLzkksLnbJTEwvSszlUlAAcxWCMxILUhWqFWxsPPNKUovSEpNT7ewUauHyTmA5x6TikqLE5BIUKWewVHBqUVkmmiYXsIxrXmlualFiSWZ+HlgWAHv9KN0="}),i[22]||(i[22]=r(`<h2 id="defining-members-of-class" tabindex="-1"><a class="header-anchor" href="#defining-members-of-class"><span>Defining Members of class</span></a></h2><blockquote><p>UML provides mechanisms to represent class members such as attributes and methods, as well as additional information about them.</p></blockquote><p>通过（）区分属性 和 方法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram </span></span>
<span class="line"><span>	class Class {</span></span>
<span class="line"><span>		function()</span></span>
<span class="line"><span>		property</span></span>
<span class="line"><span>	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>`,5)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gTzFJzBZDUXJ2daaV5ySWZ+noYmkFNQlF+QWlRSycVZywUAChsRtA=="}),i[23]||(i[23]=s("p",null,[a("问："),s("mark",{style:{background:"#FFF3A3A6"}},"所以在功能上有什么区别吗？")],-1)),i[24]||(i[24]=s("p",null,"定义的方式：",-1)),n(p,{data:[{id:"类名： 成员1"},{id:"类名"}]},{title0:l(({value:t,isActive:d})=>i[0]||(i[0]=[a("类名： 成员1",-1)])),title1:l(({value:t,isActive:d})=>i[1]||(i[1]=[a("类名",-1)])),tab0:l(({value:t,isActive:d})=>[i[2]||(i[2]=s("p",null,"实现：",-1)),i[3]||(i[3]=s("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-"},[s("span",{class:"line"},[s("span",null,"classDiagram")]),a(`
`),s("span",{class:"line"},[s("span",null,"	class Class {")]),a(`
`),s("span",{class:"line"},[s("span",null,"		member")]),a(`
`),s("span",{class:"line"},[s("span",null,"	}")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)),i[4]||(i[4]=s("p",null,"效果：",-1)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gTzFJzBZDUXJ2duam5SahEXZy0XABygDNQ="})]),tab1:l(({value:t,isActive:d})=>[i[5]||(i[5]=s("p",null,"实现：",-1)),i[6]||(i[6]=s("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-"},[s("span",{class:"line"},[s("span",null,"classDiagram ")]),a(`
`),s("span",{class:"line"},[s("span",null,"	class Class")]),a(`
`),s("span",{class:"line"},[s("span",null,"	Class: member")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)),i[7]||(i[7]=s("p",null,"效果：",-1)),n(e,{code:"eJxLzkksLnbJTEwvSsxV4OIEcxWcQSQXJ5iyUshNzU1KLeICADb5DhA="})]),_:1}),i[25]||(i[25]=r(`<h3 id="visibility" tabindex="-1"><a class="header-anchor" href="#visibility"><span>Visibility</span></a></h3><p>在属性、方法定义前添加visibility 说明<br> 实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram</span></span>
<span class="line"><span>	class Class {</span></span>
<span class="line"><span>		+ Public</span></span>
<span class="line"><span>		- Private</span></span>
<span class="line"><span>		# Protected</span></span>
<span class="line"><span>		}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>`,4)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gTzFJzBZDUXJ6e2QkBpUk5mMpCpqxBQlFmWWJIKZCsD2fklqcklqSlAXi0XAPnkFFw="}),i[26]||(i[26]=r(`<h3 id="定义方法" tabindex="-1"><a class="header-anchor" href="#定义方法"><span>定义方法</span></a></h3><p>实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram</span></span>
<span class="line"><span>	class Class {</span></span>
<span class="line"><span>		member(argument) int</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	Class : add() bool</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中方法的参数只有名称</p><p>效果：</p>`,5)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gTzFJzBZDUXJ2duam5SapFGYlF6aW5qXommQmZeCRdnLRcnRImVQmJKioamQlJ+fg4XAKXFF7w="}),i[27]||(i[27]=r(`<h3 id="泛型参数" tabindex="-1"><a class="header-anchor" href="#泛型参数"><span>泛型参数&lt;&gt;</span></a></h3><p>使用~ 替代&lt;&gt;， 直接使用&lt;&gt; 不显示<br> 实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram</span></span>
<span class="line"><span>	class Class {</span></span>
<span class="line"><span>		List~int~ position</span></span>
<span class="line"><span>	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>`,4)),n(e,{code:"eJxLzkksLnbJTEwvSszl4gTzFJzBZDUXJ6dPZnFJXWZeSZ1CQX5xZklmfh4XZy0XAONwEdQ="}),i[28]||(i[28]=r('<h2 id="defining-relationship" tabindex="-1"><a class="header-anchor" href="#defining-relationship"><span>Defining Relationship</span></a></h2><p><a href="https://creately.com/guides/class-diagram-relationships/" target="_blank" rel="noopener noreferrer">参考</a><br><a href="https://blog.visual-paradigm.com/cn/what-are-the-six-types-of-relationships-in-uml-class-diagrams/" target="_blank" rel="noopener noreferrer">参考2</a><br> 语法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>[classA][Arrow][ClassB]: label</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><table><thead><tr><th>Type</th><th>Description</th><th>中文名</th><th>含义</th></tr></thead><tbody><tr><td>&lt;--</td><td>Inheritance/Generalization</td><td>继承/泛化</td><td>一个银行账户下可以分为多种类型的账户，如：储蓄、信用。。。它们都属于银行账户。满足is-one （其中一类）的关系就是继承（泛化）</td></tr><tr><td><code>*--</code></td><td>Composition</td><td>组合</td><td>“一只青蛙一张嘴，两只眼睛，四条腿” 青蛙的身体构成包含：嘴巴、眼睛和腿。青蛙不存在时，其身体构造不能单独存在。满足 ”整体与局部的关系，但整体与局部不可分割，具有一致的生命周期。整体不存在时构成对象也不存在“</td></tr><tr><td><code>o--</code></td><td>Aggregation</td><td>聚合</td><td>和组合相同的地方：类之间也是整体 与 部分的关系。差别在于构成对象可以脱离整体单独存在。公司倒闭后员工可以转到其他公司。</td></tr><tr><td><code>--&gt;</code></td><td>Association</td><td>关联</td><td>C1驾照司机可以开小、微载客汽车，轻微载货汽车。一辆车运行需要司机<br>&quot;一个类的属性持有对另一个类的引用。组合和聚合也属于关联&quot;</td></tr><tr><td><code>--</code></td><td>Link (Solid)</td><td></td><td></td></tr><tr><td><code>..&gt;</code></td><td>Dependency</td><td>依赖</td><td>个人的成长依赖于环境。汽车行驶的距离依赖于油（电）量。”类A的变换导致类B的变化，B类依赖于A类“<br>”依赖关系时一种使用关系”。</td></tr><tr><td>..|&gt;</td><td>Realization</td><td>实现</td><td>当基类是抽象类时，子类是基类的具体实现。</td></tr><tr><td><code>..</code></td><td>Link (Dashed)</td><td></td><td></td></tr></tbody></table><p>我的理解：</p><ul><li>组合相当于捆绑多个对象构成一个对象。整体不存在，组成部分也就不存在。组成部分不能脱离整体。组成部分可以更换，但是必须存在。</li><li>聚合相比组合，连接关系稍若。组成部分可以脱离整体，即可以不包含组成部分。<br> 代码实现：</li></ul>',6)),n(p,{data:[{id:"Inheritance"},{id:"Composition/Aggregation"}]},{title0:l(({value:t,isActive:d})=>i[8]||(i[8]=[a("Inheritance",-1)])),title1:l(({value:t,isActive:d})=>i[9]||(i[9]=[a("Composition/Aggregation",-1)])),tab0:l(({value:t,isActive:d})=>i[10]||(i[10]=[s("div",{class:"language-cpp line-numbers-mode","data-highlighter":"shiki","data-ext":"cpp",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-cpp"},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"class"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," BankAccount"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"class"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," SavingAccount"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," : "),s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," BankAccount"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {};")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:l(({value:t,isActive:d})=>i[11]||(i[11]=[s("div",{class:"language-cpp line-numbers-mode","data-highlighter":"shiki","data-ext":"cpp",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-cpp"},[s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"class"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Human"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"	class"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Head"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"	class"),s("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Body"),s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"	Head head;")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"	Body body;")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"};")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("pre",null,[s("code",null,`作为成员
`)],-1)])),_:1}),i[29]||(i[29]=r(`<p>实现：</p><div class="language- line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram</span></span>
<span class="line"><span>CurrentAccount --|&gt; BankAccount : Inheritance-继承(Generalization-泛化)</span></span>
<span class="line"><span>SavingAccount --|&gt; BankAccount : Inheritance</span></span>
<span class="line"><span>CreditAccount --|&gt; BankAccount : Inheritance</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Contact --* ContactBook : Composition-组合</span></span>
<span class="line"><span>Employee --o Company : Aggregation-聚合</span></span>
<span class="line"><span>Teacher --&gt; Course : (Directed)Association-关联</span></span>
<span class="line"><span>Person ..&gt; Book : Dependency-依赖</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Corporation</span></span>
<span class="line"><span>class P</span></span>
<span class="line"><span>class Owner {</span></span>
<span class="line"><span>    &lt;&lt;interface&gt;&gt;</span></span>
<span class="line"><span>    +acquire(property)</span></span>
<span class="line"><span>    +dispose(property)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>P ..|&gt; Owner : Realization-实现</span></span>
<span class="line"><span>Corporation ..|&gt; Owner : Realization</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Driver -- Car : Association/Link(Solid)</span></span>
<span class="line"><span>classO .. classP : Link(Dashed)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>效果：</p>`,3)),n(e,{code:"eJxLzkksLnbJTEwvSszlci4tKkrNK3FMTs4vzStR0NWtsVNwSszLhglYKXjmZaQWZZYk5iWn6j7fvfxZ534N99S81KLEnMyqxJLM/DzdZ5tnP+2ZpskVnFiWmZdOnFFczkWpKZlE2ssFAFGkQ50="}),n(e,{code:"eJxLzkksLnbJTEwvSszlcs7PK0lMLlHQ1dVSgLKd8vOzFayAvNyC/OLMksz8PN3nu1ueTujgcs0tyMmvTE0Fqs4HyyfmVQJVOqanF6WmJ4JVvmicBVIZkpqYnJFaBFRoB1RYWlScClSn4ZJZlJpckpqi6VhcnJ+cCdHxtHXzi8YpXAGpRcX5eQp6enYKUAe4pBak5qWk5iVX6j7ZN/fF1mlcAGMZRx4="}),n(e,{code:"eJxLzkksLnbJTEwvSszlAnMUnPOLCvKLEksy8/OgIgFQ2r88L7VIoZrr0AIFILKxycwrSS1KS0xOtbODimknJheWZhalahQU5RekFpVUasIkUjKLC/KLkSVquQIU9PRq7KDGWikEpSbmZFaBLdZ9um7e874NXEhuwamWi8ulKLMMKKqrq+CcCJJ0LC7OT84ES+r7ZOZlawTn52SmaEJ84Q80SAHMCgAqBUu7JBZnpALlAb/4YMk="}),i[30]||(i[30]=r(`<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><h3 id="member-box" tabindex="-1"><a class="header-anchor" href="#member-box"><span>Member Box</span></a></h3><p>显示一个类时即使没有定义member 也会显示对应的box，可以通过配置修改是否显示空白（没定义member）的box<br> 配置：diagram 的属性 hideEmptyMembersBox</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>---</span></span>
<span class="line"><span>  config:</span></span>
<span class="line"><span>    class:</span></span>
<span class="line"><span>      hideEmptyMembersBox: true</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>classDiagram</span></span>
<span class="line"><span>  class Duck</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>`,5)),n(e,{code:"eJzT1dXlUlBIzs9Ly0y3ArKA7JzE4mIIU0EhIzMl1TW3oKTSNzU3KbWo2Cm/wkqhpKg0lQukEazUJTMxvSgxF2QKiKvgUpqczcUFAF75Gl4="}),i[31]||(i[31]=r(`<h3 id="setting-the-direction-of-the-diagram" tabindex="-1"><a class="header-anchor" href="#setting-the-direction-of-the-diagram"><span>Setting the direction of the diagram</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>classDiagram</span></span>
<span class="line"><span>	direction RL</span></span>
<span class="line"><span>	Children --|&gt; Base</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>`,3)),n(p,{data:[{id:"默认"},{id:"Base 在上"},{id:"RL"}]},{title0:l(({value:t,isActive:d})=>i[12]||(i[12]=[a("默认",-1)])),title1:l(({value:t,isActive:d})=>i[13]||(i[13]=[a("Base 在上",-1)])),title2:l(({value:t,isActive:d})=>i[14]||(i[14]=[a("RL",-1)])),tab0:l(({value:t,isActive:d})=>[n(e,{code:"eJxLzkksLnbJTEwvSszl4nTOyMxJKUrNU9DVrbFTcEosTuUCAMXCCuE="})]),tab1:l(({value:t,isActive:d})=>[n(e,{code:"eJxLzkksLnbJTEwvSszl4nRKLE5VsKnR1VVwzsjMSSlKzeMCAMCYCt8="}),i[15]||(i[15]=s("p",null,"默认被指向的类在上方",-1))]),tab2:l(({value:t,isActive:d})=>[n(e,{code:"eJxLzkksLnbJTEwvSszl4kzJLEpNLsnMz1MI8uHidM7IzEkpSs1T0NWtsVNwSixO5eLkAgCoFw+G"})]),_:1}),i[32]||(i[32]=s("p",null,[a("问："),s("mark",{style:{background:"#FFF3A3A6"}},"为什么默认情况下不是从上到下（先出现的在上），然后可以通过direction设置方向？")],-1))])}const A=c(g,[["render",b]]),y=JSON.parse('{"path":"/Design%20Patterns/%E7%B1%BB%E5%9B%BE.html","title":"类图","lang":"zh-CN","frontmatter":{"category":"DesignPatterns","tags":["Mermaid"],"description":"类图 Mermaid 中创建类图的语法 https://mermaid.js.org/intro/ Define a class 定义类的方式： 显式声明类： 实现： 效果： 在关系中隐式声明一个类 效果： Class labels 在类名中添加标签-额外的说明 语法： 实现： 效果： Annotations on classes It is poss...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类图\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-24T15:40:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/Design%20Patterns/%E7%B1%BB%E5%9B%BE.html"}],["meta",{"property":"og:title","content":"类图"}],["meta",{"property":"og:description","content":"类图 Mermaid 中创建类图的语法 https://mermaid.js.org/intro/ Define a class 定义类的方式： 显式声明类： 实现： 效果： 在关系中隐式声明一个类 效果： Class labels 在类名中添加标签-额外的说明 语法： 实现： 效果： Annotations on classes It is poss..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-24T15:40:41.000Z"}],["meta",{"property":"article:tag","content":"Mermaid"}],["meta",{"property":"article:modified_time","content":"2025-08-24T15:40:41.000Z"}]]},"git":{"createdTime":1754836053000,"updatedTime":1756050041000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":2,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":3.93,"words":1179},"filePathRelative":"Design Patterns/类图.md","excerpt":"","autoDesc":true}');export{A as comp,y as data};
