import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as i,f as n,r as l,o as h}from"./app-CtBWv57d.js";const p={};function d(r,s){const a=l("Mermaid");return h(),t("div",null,[s[0]||(s[0]=i('<h1 id="_6-3-udp的数据传输特性和调用connect" tabindex="-1"><a class="header-anchor" href="#_6-3-udp的数据传输特性和调用connect"><span>6.3 UDP的数据传输特性和调用connect( )</span></a></h1><h2 id="存在数据边界的udp套接字" tabindex="-1"><a class="header-anchor" href="#存在数据边界的udp套接字"><span>存在数据边界的UDP套接字</span></a></h2><p><a href="https://www.rfc-editor.org/info/rfc768?utm_source=chatgpt.com" target="_blank" rel="noopener noreferrer">Information on RFC 768 » RFC Editor</a></p><p>User Datagram Header Format</p>',4)),n(a,{code:"eJxVir0OQDAQgPc+xaWrdLAYrEQMBol4gEtdaGgr1/P+ahAxfj/GGCVODqpBz4kYWhRcGT30hEvmLrJH0eoZT7Q7iQIoyir/U7zYEoyRc39lS0lcQHExwPkrA4VVto+bjeyeLq/VDVasJls="}),s[1]||(s[1]=i(`<p>包含有Length字段（UDP Header + payload），根据Length 确定数据边界。</p><p>发送方调用发送的次数 和 接收方调用接收的次数要相同。<br> 测试：发送方先调用3次send，接收方等待发送方发送完毕后调用3次recv。recv 和 send 的内容按顺序对应。</p><p>实现：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="client"><span>client</span></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;recv </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        str_len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> recvfrom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock, message, BUF_SIZE, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                           (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sockaddr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">client_addr, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">client_addrlen);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Message </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> %s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><table><thead><tr><th>行号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>等待20s后再接收消息</td><td></td></tr></tbody></table><p>效果：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="server"><span>server</span></div><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>[2025-10-06 16:46:03.363]# SEND ASCII/5 to 192.168.56.101 :56789 &gt;&gt;&gt;</span></span>
<span class="line"><span>first</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[2025-10-06 16:46:06.934]# SEND ASCII/6 to 192.168.56.101 :56789 &gt;&gt;&gt;</span></span>
<span class="line"><span>second</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[2025-10-06 16:46:12.171]# SEND ASCII/5 to 192.168.56.101 :56789 &gt;&gt;&gt;</span></span>
<span class="line"><span>third</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="client"><span>client</span></div><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>ming@ubuntu:/media/sf_share/Network/build$ ./Network 56789</span></span>
<span class="line"><span>recv</span></span>
<span class="line"><span>Message 1 first</span></span>
<span class="line"><span>Message 2 second</span></span>
<span class="line"><span>Message 3 third</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="已连接udp套接字" tabindex="-1"><a class="header-anchor" href="#已连接udp套接字"><span>已连接UDP套接字</span></a></h2><p>使用sendto（）传输数据的过程：</p>`,10)),n(a,{code:"eJxLy8kvT85ILCrhUgACx2ilpxMmhroEPF06/Vnf0qdrpz/bvOJpW8/z2eueLWj3DHg6qef56vVP+xc/7d+uFAvW4hSt9GTPghf7Jj+buuFZ7zqoqDPQoI4FL2cuQTbryY61UONmtUBMfDpnw9O5DU/2L3zWuB6q01FBV9dOwQlMOnMBANhQUKc="}),s[2]||(s[2]=i(`<p>正是因为每次发送数据都会重新注册目标地址信息，所以同一个UDP socket 可以向不同的目标地址发送消息。<br> 如果要同一个目标主机进行长时间通信，每次sendto（）时重新注册地址信息的部分降低了传输效率。通过将UDP”连接“到指定的目标地址，每次调用sendto（）直接向目标地址发送数据，省掉了重新注册地址信息的过程，提高效率。</p><h3 id="创建已连接udp套接字" tabindex="-1"><a class="header-anchor" href="#创建已连接udp套接字"><span>创建已连接UDP套接字</span></a></h3><p>实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro has-highlighted vp-code"><code class="language-cpp"><span class="line highlighted"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sockaddr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">serv_addr, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(serv_addr)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        unix_error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;connect() error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	    //sendto(sock, message, strlen(message), 0, (struct sockaddr*)&amp;serv_addr, sizeof(serv_addr));</span></span>
<span class="line highlighted"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock, message, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>”连接“ 《=》注册 后可以直接调用send，而不是sendto 向注册的目标地址发送消息。</p><p>效果：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="client"><span>client</span></div><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>ming@ubuntu:/media/sf_share/Network/build$ ./Network 192.168.56.1 45454 56789</span></span>
<span class="line"><span>Input message(Q to quit): 1234</span></span>
<span class="line"><span>Input message(Q to quit): q</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="server"><span>server</span></div><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>[2025-10-06 17:15:42.724]# RECV ASCII/5 from 192.168.56.101 :56789 &lt;&lt;&lt;</span></span>
<span class="line"><span>1234</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,8))])}const o=e(p,[["render",d]]),g=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6.3%20UDP%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%89%B9%E6%80%A7%E5%92%8C%E8%B0%83%E7%94%A8connect(%20).html","title":"6.3 UDP的数据传输特性和调用connect( )","lang":"zh-CN","frontmatter":{"category":"网络编程","description":"6.3 UDP的数据传输特性和调用connect( ) 存在数据边界的UDP套接字 Information on RFC 768 » RFC Editor User Datagram Header Format 包含有Length字段（UDP Header + payload），根据Length 确定数据边界。 发送方调用发送的次数 和 接收方调用接收...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.3 UDP的数据传输特性和调用connect( )\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-08T13:33:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6.3%20UDP%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%89%B9%E6%80%A7%E5%92%8C%E8%B0%83%E7%94%A8connect(%20).html"}],["meta",{"property":"og:title","content":"6.3 UDP的数据传输特性和调用connect( )"}],["meta",{"property":"og:description","content":"6.3 UDP的数据传输特性和调用connect( ) 存在数据边界的UDP套接字 Information on RFC 768 » RFC Editor User Datagram Header Format 包含有Length字段（UDP Header + payload），根据Length 确定数据边界。 发送方调用发送的次数 和 接收方调用接收..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-08T13:33:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-08T13:33:52.000Z"}]]},"git":{"createdTime":1759930432000,"updatedTime":1759930432000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":1,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":1.86,"words":557},"filePathRelative":"网络编程/6.3 UDP的数据传输特性和调用connect( ).md","excerpt":"","autoDesc":true}');export{o as comp,g as data};
