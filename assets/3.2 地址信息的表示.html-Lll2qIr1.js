import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as a,o as n}from"./app-iO2jZn-u.js";const l={};function e(h,i){return n(),t("div",null,i[0]||(i[0]=[a(`<h1 id="_3-2-地址信息的表示" tabindex="-1"><a class="header-anchor" href="#_3-2-地址信息的表示"><span>3.2 地址信息的表示</span></a></h1><p>用于表示地址信息的struct</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="linux-6.1.4\\tools\\perf\\trace\\beauty\\sockaddr.c"><span>linux-6.1.4\\tools\\perf\\trace\\beauty\\sockaddr.c</span></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> short</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __kernel_sa_family_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __kernel_sa_family_t</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">	sa_family_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sockaddr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">	sa_family_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	sa_family;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/* address family, AF_xxx	*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		sa_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">14</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/* 14 bytes of protocol address	*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><table><thead><tr><th>行号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1、2</td><td>address family 类型定义</td><td>AF_INET, AF_INET6，。。。</td></tr><tr><td>5</td><td>protocol address</td><td>根据address family确定实际使用长度</td></tr></tbody></table><p>用于表示AF_INET - ipv4 的struct</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="linux-6.1.4\\tools\\include\\uapi\\linux\\in.h"><span>linux-6.1.4\\tools\\include\\uapi\\linux\\in.h</span></div><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="cpp" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> short</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __u16;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint16_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __u16;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __u16 __bitwise __le16;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __u16 __bitwise __be16;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* Internet address. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> in_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	__be32	s_addr;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> __SOCK_SIZE__</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	16</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		/* sizeof(struct sockaddr)	*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sockaddr_in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  __kernel_sa_family_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	sin_family;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/* Address family		*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  __be16		sin_port;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/* Port number			*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> in_addr</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	sin_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/* Internet address		*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* Pad to size of \`struct sockaddr&#39;. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		__pad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[__SOCK_SIZE__ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">short</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> short</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(struct in_addr)];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></div><table><thead><tr><th>行号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1-2</td><td>可移植类型定义</td><td>使用unsigned short 无法保证跨平台一致性，对于特定平台 或者 无法使用 uint16_t的使用 unsigned short 定义port 类型</td></tr><tr><td>3-4</td><td>字节序类型定义</td><td>bitwise：标记类型，用于区分相同类型，但是字节序不同。即使使用的都是u16，但是经过bitwise 标记后两者实际是不同的类型。<br>由Sparse-linux内核用的静态分析工具定义，正常使用GCC 编译bitwise替换为空。使用Sparse 分析时对于字节序不同的类型对象混合使用时会报错。<br>be - Big Endian; le - Little Endian.</td></tr><tr><td>7-9</td><td>IP地址类型定义</td><td>struct 中只包含了一个s_addr属性。</td></tr><tr><td>18-19</td><td>剩余填充的字节</td><td>为了和通用的地址结构保持一致，ipv4地址（2字节port + 4字节addr）不够14字节，要求值全部为0</td></tr></tbody></table><p>问：<mark style="background:#FFF3A3A6;">为什么sin_addr 使用结构体定义类型，而不是直接使用 be32?</mark></p>`,8)]))}const k=s(l,[["render",e]]),r=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/3.2%20%E5%9C%B0%E5%9D%80%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA.html","title":"3.2 地址信息的表示","lang":"zh-CN","frontmatter":{"category":"网络编程","description":"3.2 地址信息的表示 用于表示地址信息的struct linux-6.1.4\\\\tools\\\\perf\\\\trace\\\\beauty\\\\sockaddr.c 用于表示AF_INET - ipv4 的struct linux-6.1.4\\\\tools\\\\include\\\\uapi\\\\linux\\\\in.h 问：为什么sin_addr 使用结构体定义类型，而不是直接使用 b...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.2 地址信息的表示\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-02T13:37:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/3.2%20%E5%9C%B0%E5%9D%80%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA.html"}],["meta",{"property":"og:title","content":"3.2 地址信息的表示"}],["meta",{"property":"og:description","content":"3.2 地址信息的表示 用于表示地址信息的struct linux-6.1.4\\\\tools\\\\perf\\\\trace\\\\beauty\\\\sockaddr.c 用于表示AF_INET - ipv4 的struct linux-6.1.4\\\\tools\\\\include\\\\uapi\\\\linux\\\\in.h 问：为什么sin_addr 使用结构体定义类型，而不是直接使用 b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:37:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:37:33.000Z"}]]},"git":{"createdTime":1759412253000,"updatedTime":1759412253000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":1,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":1.47,"words":442},"filePathRelative":"网络编程/3.2 地址信息的表示.md","excerpt":"","autoDesc":true}');export{k as comp,r as data};
