import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,f as n,d as l,r as h,o as p}from"./app-CtBWv57d.js";const k={};function d(r,s){const a=h("Mermaid");return p(),t("div",null,[s[0]||(s[0]=i("h1",{id:"_7-1-基于tcp的半关闭",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_7-1-基于tcp的半关闭"},[i("span",null,"7.1 基于TCP的半关闭")])],-1)),s[1]||(s[1]=i("h2",{id:"为何需要半关闭",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#为何需要半关闭"},[i("span",null,"为何需要半关闭")])],-1)),s[2]||(s[2]=i("p",null,"考虑以下情况：",-1)),n(a,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgAC55zM1LwSBV07O4Xg1KKy1CIrhRf75z3rW/pi/fZnG5vAaiASYDUQ5VYKz6a1P9m97dnUDc961+FS4+rvBlX3ZM+CF/smP13X82z9VFy2hmQk5mUXK2i8WLji+ZJdT/t7Xy7reLJ/4bPG9ZpcAE0gT+Q="}),s[3]||(s[3]=l(`<p>客户端连接服务器后服务器向客户端发送文件，服务器发送完文件后断开与客户端的连接。但是仍需要接收客户端返回的状态信息（用Thanks表示）。<br> 通过EOF 表示文件传输完成。而EOF只在断开输出流时才会向对方主机传输。</p><h3 id="单方面断开连接的问题" tabindex="-1"><a class="header-anchor" href="#单方面断开连接的问题"><span>单方面断开连接的问题</span></a></h3><p>使用close（） 或 closesocket（）断开连接后输入缓冲中的数据会被清除，并且无法调用输入相关的函数。也无法调用输出相关函数，但是输出缓冲中的数据仍会发送。<br> 在上面的示例中，使用close（）关闭后无法接收客户端的返回信息。</p><h3 id="套接字和流" tabindex="-1"><a class="header-anchor" href="#套接字和流"><span>套接字和流</span></a></h3><blockquote><p>[!quote]<br> 两台主机通过套接字建立 <strong>连接</strong> 后进入可交换数据的状态，又称为“流形成的状态”。</p></blockquote><p>将数据看作是水。<strong>建立连接</strong> 的套接字的输入（输出）缓冲 和 对端的输出（输入）缓冲之间构成一条单向流通的管道。数据从己方的输出流向对端的输入。缓冲相当于是蓄水池，用于存储数据。</p><p>既然是基于TCP，TCP又代表了连接。那么连接的套接字形成的“流”还具有以下特点：</p><ul><li>流出的水流一定能到达对端：发送的数据不会丢失</li><li>前面流出的水流一定比后面流出的水流先到：数据按发送顺序接收，不会乱序</li></ul><h2 id="针对优雅断开的shutdown函数" tabindex="-1"><a class="header-anchor" href="#针对优雅断开的shutdown函数"><span>针对优雅断开的shutdown函数</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     #include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/socket.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> sockfd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> how</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>sockfd</td><td>需要断开的套接字文件描述符</td><td></td></tr><tr><td>how</td><td>指定断开的流</td><td>SHUT_RD：断开输入流<br>SHTU_WR：断开输出流<br>SHUT_RDWR：断开输入、输出流</td></tr></tbody></table><p>断开相当于封闭管道的入口、出口，对于输入蓄水池还会排除蓄水池里的水（清空缓冲）</p><h2 id="关于eof-与-tcp断开连接过程" tabindex="-1"><a class="header-anchor" href="#关于eof-与-tcp断开连接过程"><span>关于EOF 与 TCP断开连接过程</span></a></h2><blockquote><p>[!quote]<br> 断开输出流时向对方主机传输EOF</p></blockquote><p>TCP 断开连接的过程中并没有传输任何数据，那么EOF是如何发送的？<br> chatgpt：<br> EOF 是通过TCP 报文段中的FIN flag 实现的，在收到FIN 后内核会在接收该消息的socket 的输入缓冲写入EOF，使用recv（）/read（）读取输入缓冲，读取到EOF后返回0.<br> socket 输入缓冲中的EOF 表示缓冲不再接收数据并且缓冲中的所有数据已经被读取。</p><p>收到FIN（读取到EOF）后关闭输入流；发送FIN 关闭输出流</p>`,16)),n(a,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBIFZ4XEYgXnnMzUvBIMuWCQXHBqUVlqEVjOWUHXzk4h2ErBzdNPwSapyO5Zx8SnrZtfTl/7ZFfbi32Tn7bver5n8tO2Te/39DzZ0fu0rfdp/8SXDY1Pd015PmXF041Nz6ZueNa7DmxWMNgsZysFR2dviFlTtj3t2ADUiW5o61KIoRATn/UtBanEYmJicklmWWJJqkIwmOuXD2QWZaZnlCjkp4Ec/bS97emSdojRqE4AekcH7g4FXJ4C60lJRbMGHiYI/YQ8wgUAsQO9gg=="}),s[4]||(s[4]=l(`<p>关于为什么Client 关闭了输入缓冲后仍可接收ACK，关闭了输出缓冲后仍可发送ACK：<br> ACK、FIN 属于TCP控制报文，由内核协议控制发送。输入流、输出流影响的是应用层数据。</p><h2 id="基于半关闭的文件传输程序" tabindex="-1"><a class="header-anchor" href="#基于半关闭的文件传输程序"><span>基于半关闭的文件传输程序</span></a></h2><h3 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端"><span>服务端</span></a></h3><ol><li>准备要发送的文件</li><li>读取文件内容</li><li>accept 连接</li><li>发送文件数据</li><li>关闭输出流</li><li>接收到回复后关闭socket</li></ol><p>实现：</p><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="cpp" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fp </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    fp </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fopen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fp)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        perror</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fopen() error</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //bind(), listen(), accept() </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        read_cnt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)message, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, fp);  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(read_cnt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(client_fd, message, read_cnt);  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(client_fd, message, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(client_fd, SHUT_WR);  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;shutdown</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    read_cnt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(client_fd, message, BUF_SIZE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[read_cnt] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Message from client: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, message);  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fclose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fp);  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(client_fd);  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><table><thead><tr><th>行号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1-7</td><td>打开文件</td><td>如果打开出错，那么fopen 返回的指针为NULL。通过perror（）获取出错的具体原因</td></tr><tr><td>9-18</td><td>读取文件数据到message，然后发送</td><td>用2当作读取的最大字节数。如果剩余数据量小于2，则取实际内容大小，否则就是大于等于最大字节数，直接读取最大字节数</td></tr><tr><td>20</td><td>关闭输出流</td><td></td></tr><tr><td>22</td><td>读取输入流</td><td></td></tr></tbody></table><p>效果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span> ming@ubuntu:/media/sf_share/Network/build/Server$ ./Network 192.168.56.101 10086</span></span>
<span class="line"><span>shutdown</span></span>
<span class="line"><span>Message from client: Thank you</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭输出流后仍能收到来自client 的消息</p><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h3><p>实现：</p><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="cpp" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> read_cnt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fp </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fopen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;receive.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;wb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fp)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fopen() error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sockaddr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">serv_addr, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(serv_addr)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        unix_error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;connect() error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;connected</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( (read_cnt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock, message, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //message[read_cnt] = 0;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //printf(&quot;data:%s\\n&quot;, message);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        fwrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)message, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, read_cnt, fp);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    puts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Received file data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thank you&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fclose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fp);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>效果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>ming@ubuntu:/media/sf_share/Network/build$ ./Network 192.168.56.101 10086</span></span>
<span class="line"><span>connected</span></span>
<span class="line"><span>Received file data</span></span>
<span class="line"><span>ming@ubuntu:/media/sf_share/Network/build$ cat receive.txt</span></span>
<span class="line"><span>hello world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功接收来自服务端的文件</p>`,16))])}const g=e(k,[["render",d]]),B=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/7.1%20%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%8D%8A%E5%85%B3%E9%97%AD.html","title":"7.1 基于TCP的半关闭","lang":"zh-CN","frontmatter":{"category":"网络编程","description":"7.1 基于TCP的半关闭 为何需要半关闭 考虑以下情况： 客户端连接服务器后服务器向客户端发送文件，服务器发送完文件后断开与客户端的连接。但是仍需要接收客户端返回的状态信息（用Thanks表示）。 通过EOF 表示文件传输完成。而EOF只在断开输出流时才会向对方主机传输。 单方面断开连接的问题 使用close（） 或 closesocket（）断开连...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.1 基于TCP的半关闭\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-08T13:33:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/7.1%20%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%8D%8A%E5%85%B3%E9%97%AD.html"}],["meta",{"property":"og:title","content":"7.1 基于TCP的半关闭"}],["meta",{"property":"og:description","content":"7.1 基于TCP的半关闭 为何需要半关闭 考虑以下情况： 客户端连接服务器后服务器向客户端发送文件，服务器发送完文件后断开与客户端的连接。但是仍需要接收客户端返回的状态信息（用Thanks表示）。 通过EOF 表示文件传输完成。而EOF只在断开输出流时才会向对方主机传输。 单方面断开连接的问题 使用close（） 或 closesocket（）断开连..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-08T13:33:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-08T13:33:52.000Z"}]]},"git":{"createdTime":1759930432000,"updatedTime":1759930432000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":1,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":4.14,"words":1241},"filePathRelative":"网络编程/7.1 基于TCP的半关闭.md","excerpt":"","autoDesc":true}');export{g as comp,B as data};
