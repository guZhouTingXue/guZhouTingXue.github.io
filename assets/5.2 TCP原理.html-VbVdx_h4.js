import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as l,f as r,a as e,e as o,r as s,o as a}from"./app-b_BasNDO.js";const p="/assets/5.2%20TCP%E5%8E%9F%E7%90%86-BYLedcME.webp",u="/assets/5.2%20TCP%E5%8E%9F%E7%90%86-1-CKFzuqDY.webp",m={};function g(c,t){const n=s("Mermaid");return a(),d("div",null,[t[0]||(t[0]=l('<h1 id="_5-2-tcp原理" tabindex="-1"><a class="header-anchor" href="#_5-2-tcp原理"><span>5.2 TCP原理</span></a></h1><h2 id="套接字中的i-o缓冲" tabindex="-1"><a class="header-anchor" href="#套接字中的i-o缓冲"><span>套接字中的I/O缓冲</span></a></h2><p><img src="'+p+'" alt="" loading="lazy"><br> I/O缓冲的特性：</p><ul><li>每个socket都有I/O缓冲</li><li>在创建socket时生成缓冲</li><li>I/O缓冲包含输入缓冲 和 输出缓冲</li></ul><p>传输特性：</p><ul><li>关闭socket将丢失输入缓冲中的数据：不再接收</li><li>关闭socket会继续发送输出缓冲中的数据</li><li>不会传输超过可用的输入缓冲大小的数据：假设输入缓冲大小50bytes，可用20bytes，传输时最多发送20bytes长度数据 <ul><li>由滑动窗口协议确定当前最大传输字节大小</li><li>write在数据移动到输出缓冲后返回，TCP协议保证输出数据能够传输到对方主机，从外在表现上看write在数据传输完成时（对方主机可以读取到数据）完成。</li></ul></li></ul><p>滑动窗口协议：</p>',7)),r(n,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKF4vzk7NQSRxziTmBxqBoFXTs7mLiVwpO9C54u3ft+T8+zOQ1Pl8x6OmHis46JT/YseNkwydTg6drpL7qakDQ7KegidDtaKfh74zYZaM6L1n1P23c92dVmBDXq+cpdL6dvQdjWv/7J7qXP+pY+m7LNnCjbAARycf0="}),t[1]||(t[1]=e("h2",{id:"连接",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#连接"},[e("span",null,"连接")])],-1)),t[2]||(t[2]=e("p",null,"参考官网的捕获示例：200722_tcp_anon文件",-1)),t[3]||(t[3]=e("figure",null,[e("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1)),r(n,{code:"eJxtzksOgjAQgOG9p5gDCGmLtGCEpOjOxIWsjHFRm8YQIkLBeBkPYvQ6xnPIQ0CiXc2i3z+Tq+ysEqkWkThocRxB+VKhi0hGqUgK4CByeN4er+udA3aJialjEoRMbNmQnnQBzGHODwt6FgwYwY0qZwQ142D4PgRT2Iab1Q5ClXkIZnvtV+NaXDzbIhOCLESBy9hDNQrAqBRv1JjPl62s/uCBJy5zqMWo7ZbLZPydZN0J7Q1dCf8p9ezTadMUjd75L1sz"}),t[4]||(t[4]=e("p",null,"TCP Header Format",-1)),r(n,{code:"eJxNUMtugzAQPJevsDglB0sYCA29VVR9qFKCIFHVo4ENsQA7NSb5/XrtqsrNMzs7nllKaWCEGeGJhIeiJCVvBzBhgPzFvWkDhgeERJRtrKhWi26BlEpbFSEsowmz9AvMRkhuhJL/sySmWYIr8LOAtEu7ZWpA4yhLaY5uz+0g1W2Erp9AmjtBntE8R19uONmfTjOGst9FNkaEmxXMoK/QeTazzLF68+ARjYtPD7YWlPW7B+hY1QcHWITRvnceYIfXjz8QUxajyZeQnbo5Lt5SlmKZ4gztMC+TY9PUHgVNj7rH/KUS0vgCLLNJc7Rd7S94lplw2dn7dp2Q/dpJ8pjGGyzjWq6uXAvejEBGkL05r8OH4BeDCGsf"}),t[5]||(t[5]=l('<p>其中第106到111位为标志位，用于说明TCP 报文的用途</p><table><thead><tr><th>名称</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>SYN</td><td>Synchronization</td><td>收发数据前传输的同步消息</td></tr><tr><td>ACK</td><td>Acknowledgment</td><td>消息确认</td></tr><tr><td>Seq</td><td>Sequence Number</td><td>当前自身发送的数据包的序号值</td></tr><tr><td>Ack</td><td>Acknowledgment Number</td><td>当前已接收的对端数据包的序号</td></tr><tr><td>报文中[SYN, ACK] 表示对应的标志位为1</td><td></td><td></td></tr></tbody></table><blockquote><p>[!quote]<br> 收发数据前向数据包分配序号，并向对方通报此序号，这都是为防止数据丢失所做的准备。通过向数据包分配序号并确认，可以在数据丢失时马上查看并重传丢失的数据包。</p></blockquote><p>问：<mark style="background:#FFF3A3A6;">SYN 消息和 ACK消息有什么区别？收到SYN后会保存SYN消息中的Seq Number，然后在此基础上进行回复？</mark></p><ul><li>SYN 同步消息的作用：向对方通报数据包序号</li><li>ACK 消息：在接收的Seq Number基础上增加，表示已经接收到了Seq Number，请传递序号为SeqNumber + 1的数据包</li></ul><h2 id="交换数据" tabindex="-1"><a class="header-anchor" href="#交换数据"><span>交换数据</span></a></h2>',6)),r(n,{code:"eJxljTsKwkAQhntPMaQ2YR9mNxET2GghaCGmFIs1LBqMeYuX8SCi1xHPYV6g0SmG4Z/5vilUdlZxoGah3OfyNICqUpmXYRCmMi5BgCzgeXu8rncB2CYGZpZBEDIwNSFN8hK4xa0/zPtgXg8juKWqGUGDCdBdF7wxbFb+fCimiy34KnMwiOBY9ckud+tgLS+OScmIIIp4vasDYnOLUc4YgvZQO6goSjRYqthhjd4DvfaLyv/j5j33l6qTd98wHbwBHSFTMA=="}),t[6]||(t[6]=e("p",null,[o("A 向 B 发送了6个字节的数据， B回复的Ack 值为7，在A发送的Seq 基础上 增加传输的数据字节数。"),e("br"),o(" 整个过程：A-》B：当前发送的数据从序号1开始，长度为6字节。给我你的从序号1开始的数据。B-》A：给你序号1开始的数据，长度为0。 我正确接收到了直到序号7的数据。")],-1)),t[7]||(t[7]=e("p",null,"Ack 的增量为字节长度而不是1是为了对数据包的所有字节进行确认，如果只增加1则是对整个数据包的确认，无法明确是全部正确接收还是丢失了一部分。",-1)),t[8]||(t[8]=e("p",null,[o("问题："),e("mark",{style:{background:"#FFF3A3A6"}},"这里SEQ 以及 回复的 ACK 值和书上的说明不一致啊！"),e("br"),o(" 如果按照书中的 ACK -》SEQ + 传递的字节数 + 1，那么上面回复的报文中Ack 应该是 307 + 6 + 1 = 314，而不是313")],-1)),t[9]||(t[9]=e("p",null,"但是在SYN 过程中ACK 是有+1，所以连接 和 交换数据过程有所不同？",-1)),t[10]||(t[10]=e("h2",{id:"断开连接",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#断开连接"},[e("span",null,"断开连接")])],-1)),r(n,{code:"eJyVz00KgkAUwPG9p3gHKJkxP8ZIYSyCKFrUMlpMMoREpqPRZTpI1HWiczQzoWK5aVYPHv8f8wqen3ka80nC9oIdDZAvY6JM4iRjaQkUWAHP2+N1vVPAvmVil5gWQiYeOJCdRAke8chPFjVZ1Mos/KnkjEBnEfTDEOgQNtPZsgd0PN/CmueBBzQ+BL5jIVjwNEAw2olQbVbsEvgI22qvZgfZjpaoliIp1YjOlUM6EBVWiAS/kfZ3/peaw2qEVDfh7ptqRIKu8QbNSXI9"}),t[11]||(t[11]=e("p",null,"为了简便实际传输的序号值取末尾4位。",-1)),t[12]||(t[12]=e("blockquote",null,[e("p",null,[o("[!quote]"),e("br"),o(" A control bit (finis) occupying one sequence number, which indicates that the sender will send no more data or control occupying sequence space.")])],-1)),t[13]||(t[13]=e("p",null,"主机B是断开连接的发起方，主机A在收到断开连接请求后进行处理，在准备就绪后回复可以断开消息，然后主机B断开，并最终发送一个已断开消息。",-1)),t[14]||(t[14]=e("p",null,[o("问："),e("mark",{style:{background:"#FFF3A3A6"}},"收到FIN后做了什么处理工作？前面提到关闭socket后清除接收缓冲，是在什么时候进行的？")],-1))])}const k=i(m,[["render",g]]),B=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5.2%20TCP%E5%8E%9F%E7%90%86.html","title":"5.2 TCP原理","lang":"zh-CN","frontmatter":{"category":"网络编程","description":"5.2 TCP原理 套接字中的I/O缓冲 I/O缓冲的特性： 每个socket都有I/O缓冲 在创建socket时生成缓冲 I/O缓冲包含输入缓冲 和 输出缓冲 传输特性： 关闭socket将丢失输入缓冲中的数据：不再接收 关闭socket会继续发送输出缓冲中的数据 不会传输超过可用的输入缓冲大小的数据：假设输入缓冲大小50bytes，可用20byte...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.2 TCP原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-08T13:33:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5.2%20TCP%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:title","content":"5.2 TCP原理"}],["meta",{"property":"og:description","content":"5.2 TCP原理 套接字中的I/O缓冲 I/O缓冲的特性： 每个socket都有I/O缓冲 在创建socket时生成缓冲 I/O缓冲包含输入缓冲 和 输出缓冲 传输特性： 关闭socket将丢失输入缓冲中的数据：不再接收 关闭socket会继续发送输出缓冲中的数据 不会传输超过可用的输入缓冲大小的数据：假设输入缓冲大小50bytes，可用20byte..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-08T13:33:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-08T13:33:52.000Z"}]]},"git":{"createdTime":1759930432000,"updatedTime":1759930432000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":1,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":4.06,"words":1217},"filePathRelative":"网络编程/5.2 TCP原理.md","excerpt":"","autoDesc":true}');export{k as comp,B as data};
