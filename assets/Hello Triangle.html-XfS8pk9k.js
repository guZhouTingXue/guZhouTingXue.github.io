import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as a,o as e}from"./app-PlJrQRNa.js";const n={};function h(l,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="hello-triangle" tabindex="-1"><a class="header-anchor" href="#hello-triangle"><span>Hello Triangle</span></a></h1><ul><li>openGL 的大部分工作是将3D坐标转变2D像素</li><li>通过 graphics pipeline 完成转换</li><li>转换过程可以划分为两个部分：将3D坐标转换为2D坐标；将2D坐标转换为像素</li><li>graphics pipeline 可以划分为6个步骤，每个步骤的输入是上一个步骤的输出</li><li>一些步骤（Shader）可以设定为自己编写的程序 <ul><li>Shaders are written in the OpenGL Shading Language (GLSL)</li></ul></li><li>可以设置绘制的形状类型（数据的结构）如给定3个点可以绘制成一个三角形，也可以绘制成两条线段 <ul><li>Those hints are called <code>primitives</code></li><li>Some of these hints are GL_POINTS, GL_TRIANGLES and GL_LINE_STRIP</li></ul></li></ul><table><thead><tr><th>step</th><th>name</th><th>中文名</th><th>作用</th><th>configurable；可选？</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>VERTEX SHARDER</td><td>顶点着色器</td><td>1. transform 3D coordinates into different 3D coordinates<br>2. some basic processing on the vertex attributes</td><td>Y</td><td></td></tr><tr><td>2</td><td>GEOMETRY SHADER</td><td>几何着色器</td><td>has the ability to generate other shapes by emitting new vertices to form new primitives</td><td>Y；Y</td><td>额，示例上看vertex shader 传递过来3个顶点，在这里增加了一个顶点</td></tr><tr><td>3</td><td>SHAPE ASSEMBLY</td><td>图元装配</td><td>form one or more primitives and assembles all the point(s) in the primitive shape given</td><td>N</td><td>4个顶点构成了2个triangles</td></tr><tr><td>4</td><td>RASTERIZATION</td><td>光栅化</td><td>1. it maps the resulting primitive(s) to the corresponding pixels on the final screen<br>2. Clipping discards all fragments that are outside your view</td><td>N</td><td></td></tr><tr><td>5</td><td>FRAGMENT SHADER</td><td>片段着色器</td><td>calculate the final color of a pixel</td><td>Y</td><td></td></tr><tr><td>6</td><td>TESTS AND BLEDING</td><td>测试与混合</td><td>checks the corresponding depth value of the fragment <br>checks for alpha values and blends the objects accordingly.</td><td>N</td><td></td></tr></tbody></table><h2 id="ndc-normalized-device-coordinates" tabindex="-1"><a class="header-anchor" href="#ndc-normalized-device-coordinates"><span>NDC - Normalized Device Coordinates</span></a></h2><p>OpenGL 使用NDC 坐标系进行绘制。<br><strong>坐标系定义</strong></p><blockquote><p>[!quote]<br> the positive y-axis points in the up-direction and the (0,0) coordinates are at the center of the graph</p></blockquote><p>原点在图像中心，x向右为正，y向上为正。坐标范围 [-1.0，1.0]，超出范围不会显示<br> 通过glViewport 可以将 NDC 坐标转化为 screen-space coordinates, screen-space 是在glfw 中指定的OpenGL 渲染宽口。</p><h2 id="vertex-input" tabindex="-1"><a class="header-anchor" href="#vertex-input"><span>Vertex input</span></a></h2><blockquote><p>[!quote]<br> To start drawing something we have to first give OpenGL some input vertex data.</p></blockquote><p>步骤：</p><ol><li>define vertices in normalized device coordinates in a float array</li><li>creating memory on the GPU where we store the vertex data</li><li>configure how OpenGL should interpret the memory</li><li>specify how to send the data to the graphics card</li></ol><h3 id="define-vertices" tabindex="-1"><a class="header-anchor" href="#define-vertices"><span>define vertices</span></a></h3><p>实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> vertices[] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0.5</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0.0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">f</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用NDC坐标；浮点类型；<br> 因为是表示3维坐标，每个vertex 用3个坐标值定义，依次是x，y，z。</p><h3 id="creating-memory-on-the-gpu" tabindex="-1"><a class="header-anchor" href="#creating-memory-on-the-gpu"><span>creating memory on the GPU</span></a></h3><p>使用 vertex buffer objects (VBO) 存储GPU 内存中的vertices<br> 因为CPU 传递 数据给GPU的速度非常满，所以尽量一次性将所有要用到的数据发送给GPU，让GPU存储。shader 获取GPU中的数据速度非常快。</p><p>实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VBO;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glGenBuffers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VBO);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>行号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>存放VBO id</td><td></td></tr><tr><td>2</td><td>生成VBO对象</td><td>可以一次性创建多个VBO对象，第一个参数是定义的VBO对象的数量，第二个参数是存放VBOid的地址</td></tr></tbody></table><h3 id="send-data" tabindex="-1"><a class="header-anchor" href="#send-data"><span>send data</span></a></h3><p>在发送数据前，需要先bind VBO<br> 实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> glBindBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(	</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">GLenum</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">GLuint</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glBindBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GL_ARRAY_BUFFER, VBO);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>GL_ARRAY_BUFFER</td><td>OpenGL has many types of buffer objects, GL_ARRAY_BUFFER 表示 vertex buffer</td></tr><tr><td>buffer</td><td>VBO</td><td>要绑定的VBO id</td></tr></tbody></table><p>所有针对GL_ARRAY_BUFFER的操作都是基于当前bind的 buffer。<br> 发送：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> glBufferData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(	</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">GLenum</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">	target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">GLsizeiptr</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">	size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GLvoid</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">	data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">GLenum</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">	usage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glBufferData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GL_ARRAY_BUFFER, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vertices), vertices, GL_STATIC_DRAW);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!quote]<br> glBufferData is a function specifically targeted to copy user-defined data into the currently bound buffer.</p></blockquote><table><thead><tr><th>参数</th><th>值</th><th>用途</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>GL_ARRAY_BUFFER</td><td>type of the buffer we want to copy data into</td><td></td></tr><tr><td>size</td><td>sizeof(vertices)</td><td>specifies the size of the data (in bytes) we want to pass to the buffer</td><td></td></tr><tr><td>data</td><td>vertices</td><td>the actual data we want to send</td><td></td></tr><tr><td>usage</td><td>GL_STATIC_DRAW</td><td>how we want the graphics card to manage the given data</td><td>数据变化的频率，这里的值表示不会变化</td></tr></tbody></table><p>问：<mark style="background:#FFF3A3A6;">所以调用glBufferData 后才会在GPU中分配对应buffer使用的内存？bind 新的buffer 后之前的buffer 怎么样了，是被释放了？</mark></p><table><thead><tr><th>值</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>GL_STREAM_DRAW</td><td>the data is set only once and used by the GPU at most a few times</td><td>只设置依次（数据不会发生变化），最多使用几次（频率低）</td></tr><tr><td>GL_STATIC_DRAW</td><td>the data is set only once and used many times</td><td></td></tr><tr><td>GL_DYNAMIC_DRAW</td><td>the data is changed a lot and used many times.</td><td></td></tr></tbody></table><p>问：<mark style="background:#FFF3A3A6;">对于经常变化的数据，每次如何更新数据？还是需要再glBufferData？</mark></p><h2 id="vertex-shader" tabindex="-1"><a class="header-anchor" href="#vertex-shader"><span>Vertex shader</span></a></h2><h3 id="writing-a-shader" tabindex="-1"><a class="header-anchor" href="#writing-a-shader"><span>writing a shader</span></a></h3><p>vertex shader的目的：</p><blockquote><p>[!quote]<br> transform the input data to coordinates that fall within OpenGL&#39;s visible region.</p></blockquote><p>最简单的vertex shader程序：</p><div class="language-glsl line-numbers-mode" data-highlighter="shiki" data-ext="glsl" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-glsl"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#version </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">330</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> core</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">layout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">location </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> vec3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> aPos;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    gl_Position </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vec4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">aPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">aPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">aPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>行号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>declaration of its version</td><td>当前使用3.3 版本 及 core profile functionality</td></tr><tr><td>2</td><td>declare all the input vertex attributes</td><td>in 表示 input；vec 是 vector的缩写，是GLSL 语言定义的数据类型，后面的3是vector 的维度-3维向量。<br>Layout (location = 0) 说明 变量在buffer中的位置</td></tr><tr><td>4</td><td>函数起始</td><td></td></tr><tr><td>5</td><td>设置vertex shader的输出</td><td>gl_Position 是 predefined 的变量，它的类型是vec4<br>vector 最大维数是1，每个维度的值的名称依次是x, y, z, w，通过下标运算符+名称访问对应的值。<br>将aPos的值拷贝到gl_Position, 并设置gl_Position的w为 1.0</td></tr></tbody></table><h3 id="compiling-a-shader" tabindex="-1"><a class="header-anchor" href="#compiling-a-shader"><span>Compiling a shader</span></a></h3><p>编译的过程：</p><ol><li>create a shader object</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> vertexShader;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vertexShader </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> glCreateShader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GL_VERTEX_SHADER);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>shader 有多种类型，这里使用GL_VERTEX_SHADER表示要创建的是vertex shader</p><ol start="2"><li>将vertex shader 存储到 c字符串中</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vertexShaderSource </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;#version 330 core</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;layout (location = 0) in vec3 aPos;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;void main()</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;{</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;}</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>attach the shader source code to the shader object and compile the shader</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glShaderSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vertexShader, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vertexShaderSource, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glCompileShader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vertexShader);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>source code 可以分为多段，编译前将其拼接到一起。最后一个参数的含义是字符串的长度数组，设置为NULL，表示每段字符都是以\\0结尾。</p><h4 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  success;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> infoLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">512</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glGetShaderiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vertexShader, GL_COMPILE_STATUS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">success);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">success)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    glGetShaderInfoLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vertexShader, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">512</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, infoLog);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> infoLog </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>行号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>出错的标志</td><td></td></tr><tr><td>2</td><td>存储错误信息</td><td></td></tr><tr><td>3</td><td>获取shader的编译状态参数</td><td>GL_COMPILE_STATUS： 编译状态参数，还有其他参数，如：GL_SHADER_TYPE</td></tr><tr><td>7</td><td>获取错误日志</td><td></td></tr><tr><td>8</td><td>打印日志</td><td></td></tr></tbody></table>`,51)]))}const p=s(n,[["render",h]]),k=JSON.parse('{"path":"/LearnOpenGL/Hello%20Triangle.html","title":"Hello Triangle","lang":"zh-CN","frontmatter":{"category":"LearnOpenGL","description":"Hello Triangle openGL 的大部分工作是将3D坐标转变2D像素 通过 graphics pipeline 完成转换 转换过程可以划分为两个部分：将3D坐标转换为2D坐标；将2D坐标转换为像素 graphics pipeline 可以划分为6个步骤，每个步骤的输入是上一个步骤的输出 一些步骤（Shader）可以设定为自己编写的程序 Sh...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hello Triangle\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-02T13:37:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/LearnOpenGL/Hello%20Triangle.html"}],["meta",{"property":"og:title","content":"Hello Triangle"}],["meta",{"property":"og:description","content":"Hello Triangle openGL 的大部分工作是将3D坐标转变2D像素 通过 graphics pipeline 完成转换 转换过程可以划分为两个部分：将3D坐标转换为2D坐标；将2D坐标转换为像素 graphics pipeline 可以划分为6个步骤，每个步骤的输入是上一个步骤的输出 一些步骤（Shader）可以设定为自己编写的程序 Sh..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:37:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:37:33.000Z"}]]},"git":{"createdTime":1759412253000,"updatedTime":1759412253000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":1,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":4.96,"words":1489},"filePathRelative":"LearnOpenGL/Hello Triangle.md","excerpt":"","autoDesc":true}');export{p as comp,k as data};
