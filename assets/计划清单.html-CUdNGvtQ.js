import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as s,b as t,d as n,e,o as c}from"./app-Nxb3eokH.js";const r="/assets/%E8%AE%A1%E5%88%92%E6%B8%85%E5%8D%95-CYmOr7rG.webp",d="/assets/%E8%AE%A1%E5%88%92%E6%B8%85%E5%8D%95-1-CH62QJ6X.webp",p="/assets/%E8%AE%A1%E5%88%92%E6%B8%85%E5%8D%95-2-mlf8XQx2.webp",k="/assets/%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9%E8%B7%B3%E5%8F%98-Bj_bDc_a.gif",h={};function o(m,i){return c(),l("div",null,[i[0]||(i[0]=s("p",null,[e("实现IEC 60870-5-104协议通讯的客户端的计划清单"),s("br"),e(" （完全仿照IEC 60870-5-101/104 Test Client "),s("a",{href:"https://www.mz-automation.de",target:"_blank",rel:"noopener noreferrer"},"https://www.mz-automation.de"),e("）")],-1)),t(" more "),i[1]||(i[1]=n(`<h1 id="计划清单" tabindex="-1"><a class="header-anchor" href="#计划清单"><span>计划清单</span></a></h1><p>软件实现分为界面 和 功能两大部分</p><p><a href="https://wiki.wireshark.org/samplecaptures#iec-60870-5-104" target="_blank" rel="noopener noreferrer">网络抓包示例下载</a></p><h2 id="界面" tabindex="-1"><a class="header-anchor" href="#界面"><span>界面</span></a></h2><p>单个界面的实现分为：</p><ol><li>静态显示（内部）；</li><li>动态交互（外部）；<br> 静态显示包含以下几种情况：</li></ol><ul><li>显示内容不变；</li><li>显示的内容由状态决定：如连接状态</li><li>显示的内容由数据决定：如接收到的报文<br> 状态和数据的区别是状态是数量、类型确定的，而数据是数量、类型不确定的。</li></ul><p>动态交互包括：</p><ul><li>用户操作改变界面显示：如界面的展开、隐藏；点击后按钮的状态等</li><li>组件之间的通讯：如接收报文后主界面中的表格更新报文数据</li></ul><p>界面实现从主界面开始，按照重要程度、实现难度 从高到低进行排列。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 菜单栏</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 连接配置</label><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> GroupBox：包含IP、Port 和 Connect 的connection框（visual frame）</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> TextInput：ip、port 输入</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> Layout：排列控件</label></li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 主界面底部状态栏</label><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> States：将状态栏的背景颜色、连接状态绑定到一起</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 收发序号</label><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> 短帧报文中带有接收序号的I格式 和 S格式类型帧</label></li></ul></li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> 连接配置控件的接口</label><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> qml 之间的交互：Signal and Handler Event System</label></li></ul></li></ul><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h2><p>以下是一个完整的IEC 60870客户端功能：</p><ul><li>Support for sending all standard message types</li><li>Define and send /receive custom message types</li><li>Sending commands</li><li>Analyze message details</li><li>File upload and download to the device</li><li>Save recorded telegrams for later analysis</li><li>Support TLS encryption</li><li>Save latest values in an Excel or CSV file</li><li>。。。</li></ul><p>以上Fetures 主要分为几个部分：</p><ul><li>Send/Receive message <ul><li>standard message types</li><li>custom</li></ul></li><li>Analyze message</li><li>Save</li><li>TLS</li></ul><p>每个部分可以分为基础部分和扩展部分，比如receive 基础部分是standart message types，扩展是custom；<br> 功能从Receive-》Send -》 Analyze-》Save</p><p>功能的实现可以独立进行，但是需要保留和连接的通讯（从界面获取配置，或发送信息给界面显示）</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> 在qt 中使用lib60870 动态连接库 建立连接</label></li></ul><h2 id="关于界面与实现的想法" tabindex="-1"><a class="header-anchor" href="#关于界面与实现的想法"><span>关于界面与实现的想法</span></a></h2><p>界面应该完全独立于具体实现，也就是它不包含具体实现对象。同样地，实现也应该独立于界面。它们只通过接口进行交互。<br> 比如连接配置<br> 实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConnectionParameters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	Q_OBJECT</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	Q_ElELMENT</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	Q_PROPERTY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>界面：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	validator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">IntValidator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">bottom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">65535</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//ConnectionParamerters { id: parameters }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在界面中包含了实现的对象，就是将界面和实现绑定了。修改其中一方，对另一方有影响。<br> 实际应该按照谁需要谁包含。对于不需要界面的，可以只包含实现。对于需要界面的就同时包含界面和实现。然后连接两者的信号和槽。</p><h2 id="进度" tabindex="-1"><a class="header-anchor" href="#进度"><span>进度</span></a></h2><h3 id="主界面" tabindex="-1"><a class="header-anchor" href="#主界面"><span>主界面</span></a></h3><p>时间：2025-08-31<br> 当前实现效果：<br><img src="`+r+'" alt="" loading="lazy"><br> 已完成：</p><ul><li>APCI 的显示：根据实际帧类型显示对应的内容</li><li>I帧中的M_ME_NB_1 和 M_ME_NC_1 的 ioa 及 value 的显示</li></ul><p>最终效果：<br><img src="'+d+'" alt="" loading="lazy"></p><p>欠缺的内容：</p><ul><li>Quick Access: read、station 命令 和 filter</li><li>右下角的本地存储的 接收、发送计数 （应该增加一个ACK计数值）</li><li>表格显示： <ul><li>单元格边框：包含表格内容 及 表头</li><li>每行的背景颜色：区分发送、接收；不同的APDU（相邻的APDU 采用不同的颜色）；选中行</li><li>滚动轴</li><li>表头宽度</li><li>文本位置<br> 存在的问题：</li></ul></li><li>文本重叠：当相邻的单元格宽度不足，文本过长时 文本会重叠<br><img src="'+p+'" alt="" loading="lazy"></li><li>值显示跳变：宽度不足时，显示的内容会变换（实际值没有变换，拉长后正常）<br><img src="'+k+'" alt="" loading="lazy"></li></ul>',32))])}const g=a(h,[["render",o]]),A=JSON.parse('{"path":"/IEC%2060870-5-104/%E8%AE%A1%E5%88%92%E6%B8%85%E5%8D%95.html","title":"计划清单","lang":"zh-CN","frontmatter":{"tags":["IEC60870"],"description":"实现IEC 60870-5-104协议通讯的客户端的计划清单 （完全仿照IEC 60870-5-101/104 Test Client https://www.mz-automation.de）","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计划清单\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-31T13:58:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/IEC%2060870-5-104/%E8%AE%A1%E5%88%92%E6%B8%85%E5%8D%95.html"}],["meta",{"property":"og:title","content":"计划清单"}],["meta",{"property":"og:description","content":"实现IEC 60870-5-104协议通讯的客户端的计划清单 （完全仿照IEC 60870-5-101/104 Test Client https://www.mz-automation.de）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-31T13:58:06.000Z"}],["meta",{"property":"article:tag","content":"IEC60870"}],["meta",{"property":"article:modified_time","content":"2025-08-31T13:58:06.000Z"}]]},"git":{"createdTime":1754545613000,"updatedTime":1756648686000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":7,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":3.24,"words":971},"filePathRelative":"IEC 60870-5-104/计划清单.md","excerpt":"<p>实现IEC 60870-5-104协议通讯的客户端的计划清单<br>\\n（完全仿照IEC 60870-5-101/104 Test Client <a href=\\"https://www.mz-automation.de\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.mz-automation.de</a>）</p>\\n","autoDesc":true}');export{g as comp,A as data};
