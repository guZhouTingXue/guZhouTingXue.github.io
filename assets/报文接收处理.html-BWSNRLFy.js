import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as i}from"./app-Dd84Q4yO.js";const l={};function p(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="报文接收处理" tabindex="-1"><a class="header-anchor" href="#报文接收处理"><span>报文接收处理</span></a></h1><h2 id="一次接收不同类型的多个包-tcp粘包" tabindex="-1"><a class="header-anchor" href="#一次接收不同类型的多个包-tcp粘包"><span>一次接收不同类型的多个包（TCP粘包）</span></a></h2><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>准备数据：<br> 模拟被控站：建立连接后将以下数据包一次性发送给控制站</p><ol><li>startdt con：启动数据传输确认</li><li>I（0，0）：包含两个M_ME_NB_1数据</li><li>I（1，0）：包含1个M_ME_NC_1 数据</li></ol><div class="language- line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>// startdt con</span></span>
<span class="line"><span>0000   68 04 0b 00 00 00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//I（0，0）</span></span>
<span class="line"><span>0000   68 16 00 00 00 00</span></span>
<span class="line"><span>//M_ME_NB_1</span></span>
<span class="line"><span>0000   0b 02 01 00 01 00 6e 00 00 00 00 00 6f 00 00 00</span></span>
<span class="line"><span>0010   00 00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//I（1，0）</span></span>
<span class="line"><span>0000   68 12 02 00 00 00</span></span>
<span class="line"><span>//M_ME_NC_1</span></span>
<span class="line"><span>0000   0d 01 01 00 01 00 78 00 00 25 06 49 40 00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>综合：</span></span>
<span class="line"><span>68 04 0b 00 00 00 68 16 00 00 00 00  0b 02 01 00 01 00 6e 00 00 00 00 00 6f 00 00 00 00 00 68 12 02 00 00 00 0d 01 01 00 01 00 78 00 00 25 06 49 40 00</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>使用网络调试助手：<br> 设置为TCP server，端口号设置为2404<br> 启动client，连接到server<br> 连接建立成功后回复数据包</p><p>结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>msgSize: 6</span></span>
<span class="line"><span>RCVD: </span></span>
<span class="line"><span>&quot; 68 4 b 0 0 0&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>msgSize: 24</span></span>
<span class="line"><span>RCVD: </span></span>
<span class="line"><span>&quot; 68 16 0 0 0 0 b 2 1 0 1 0 6e 0 0 0 0 0 6f 0 0 0 0 0&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>msgSize: 20</span></span>
<span class="line"><span>RCVD: </span></span>
<span class="line"><span>&quot; 68 12 2 0 0 0 d 1 1 0 1 0 78 0 0 25 6 49 40 0&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析时数据包被拆分为3包，长度分别为6，24，20. 和单个帧发送的数据对应。</p>`,10)]))}const c=n(l,[["render",p]]),o=JSON.parse('{"path":"/IEC%2060870-5-104/%E6%8A%A5%E6%96%87%E6%8E%A5%E6%94%B6%E5%A4%84%E7%90%86.html","title":"报文接收处理","lang":"zh-CN","frontmatter":{"category":"IEC 60870-5-104","description":"报文接收处理 一次接收不同类型的多个包（TCP粘包） 测试 准备数据： 模拟被控站：建立连接后将以下数据包一次性发送给控制站 startdt con：启动数据传输确认 I（0，0）：包含两个M_ME_NB_1数据 I（1，0）：包含1个M_ME_NC_1 数据 使用网络调试助手： 设置为TCP server，端口号设置为2404 启动client，连接...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"报文接收处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-31T13:58:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/IEC%2060870-5-104/%E6%8A%A5%E6%96%87%E6%8E%A5%E6%94%B6%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:title","content":"报文接收处理"}],["meta",{"property":"og:description","content":"报文接收处理 一次接收不同类型的多个包（TCP粘包） 测试 准备数据： 模拟被控站：建立连接后将以下数据包一次性发送给控制站 startdt con：启动数据传输确认 I（0，0）：包含两个M_ME_NB_1数据 I（1，0）：包含1个M_ME_NC_1 数据 使用网络调试助手： 设置为TCP server，端口号设置为2404 启动client，连接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-31T13:58:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-31T13:58:06.000Z"}]]},"git":{"createdTime":1756648686000,"updatedTime":1756648686000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":1,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"IEC 60870-5-104/报文接收处理.md","excerpt":"","autoDesc":true}');export{c as comp,o as data};
