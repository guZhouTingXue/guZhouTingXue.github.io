import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as i,b as r,f as t,d as p,e,r as h,o as k}from"./app-ku5yr4jp.js";const d={};function o(g,s){const a=h("Mermaid");return k(),l("div",null,[s[0]||(s[0]=i("h1",{id:"结构定义",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#结构定义"},[i("span",null,"结构定义")])],-1)),s[1]||(s[1]=i("p",null,[e("从原始报文到界面显示"),i("br"),e(" 定义存储显示数据的结构")],-1)),r(" more "),s[2]||(s[2]=i("h2",{id:"apci",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#apci"},[i("span",null,"APCI")])],-1)),t(a,{code:"eJxLzkksLnbJTEwvSszl4gTzFBwDnD0Vqrk4OW1sHJOKS4oSk0vs7IDckMqCVIUSIAFkl2bmlVjElygkZyQWRZvFKiSVpqWlFgElyjKLSkoTcxQCg0uKMvPSFVIyiwtyEis1NBVsFQysuThruQBFuCPS"}),s[3]||(s[3]=p(`<p>m_type: APCI的类型<br> buffer：原始数据<br> display(): 显示的内容<br> APCI 是抽象类，它本身没有含义，不能直接定义APCI 对象</p><p>注意：</p><ol><li>数组类型<br> 使用char 计算序列号</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>18446744073709551552</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>char 是有符号数，最高位表示符号位-1为负数。<br> a 的值 为-128。对s 赋值时左侧表达式为 char 类型，值为-64，最高位为1.转换为size_t 后就是一个很大的数了。<br> 处理报文中的字节数时，使用unsigned char。库中使用uint8_t。</p><ol start="2"><li>纯虚函数不能在类内定义：派生类对象调用纯虚函数，或 通过抽象类的引用</li></ol>`,8)),t(a,{code:"eJxLzkksLnbJTEwvSszl4gTzFBwDnD0VqhVsbByTikuKEpNL7OwUamGSQBkuTk5PjeSMxCIFrSRNIKc4syo1vkShKDW5LDi1sDQ1LznVrzQ3KbUIIVecmpeCLgc00lNBV9cObB/M+FCw8aHIxodUFqQqlAAJsJZQDC3BYC3BRLoIaEQwwggA+T5LFg=="}),s[4]||(s[4]=i("p",null,[e("recvSequenceNumber: 接收序列号"),i("br"),e(" sendSequenceNumber: 发送序列号"),i("br"),e(" Type： U帧报文类型"),i("br"),e(" 在构造函数中设置原始报文并解析数据")],-1)),s[5]||(s[5]=i("h2",{id:"asdu",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#asdu"},[i("span",null,"ASDU")])],-1)),t(a,{code:"eJxlUE1rg0AQPZtfMcekv6DQIEjTgxBqQ2yvZdQxbNHVzsyKIfS/d9dYA81l5/O92ffKBkV2Bk+M7SqaKkiOu3e4wHabFKKMpcYxrKLIGauPnwoPhatrYt/Jzz2lFagPT778OB5gQDZYNHRUdqU6poPDxtSGOGw8ZzmU6ISyOme0YlojYjobZklVMaB/QrE3otvU1h23qH7hpaGWrMZA10QmRN/v8Uz8hv7zpMQC/ZKGhaEzVaCc0et7ws2yJqRzT9b/r8ebVfTz505QefEoH4S+HdlyEv/q2nQE69qCOLUVjb65YILugMlJFNQ/E4JOnn0gsHMyORTcycerS6GRJdCxORmL2nHwiCRoW6jvNU2XUo8zt1FWfFGpN3gUGH4BOsSn0w=="}),s[6]||(s[6]=i("p",null,"结构定义包含可选项，如COT中的OA，在配置参数中获取是否包含可选项，如果包含再获取可选项的值。",-1))])}const u=n(d,[["render",o]]),m=JSON.parse('{"path":"/IEC%2060870-5-104/%E7%BB%93%E6%9E%84%E5%AE%9A%E4%B9%89.html","title":"结构定义","lang":"zh-CN","frontmatter":{"category":"IEC 60870-5-104","description":"从原始报文到界面显示 定义存储显示数据的结构","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构定义\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-31T13:58:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mingStudent\\"}]}"],["meta",{"property":"og:url","content":"https://guzhoutingxue.github.io/IEC%2060870-5-104/%E7%BB%93%E6%9E%84%E5%AE%9A%E4%B9%89.html"}],["meta",{"property":"og:title","content":"结构定义"}],["meta",{"property":"og:description","content":"从原始报文到界面显示 定义存储显示数据的结构"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-31T13:58:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-31T13:58:06.000Z"}]]},"git":{"createdTime":1756648686000,"updatedTime":1756648686000,"contributors":[{"name":"guZhouTingXue","username":"guZhouTingXue","email":"2422173022@qq.com","commits":1,"url":"https://github.com/guZhouTingXue"}]},"readingTime":{"minutes":1.29,"words":388},"filePathRelative":"IEC 60870-5-104/结构定义.md","excerpt":"\\n<p>从原始报文到界面显示<br>\\n定义存储显示数据的结构</p>\\n","autoDesc":true}');export{u as comp,m as data};
